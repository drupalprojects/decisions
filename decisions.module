<?php

/**
 * @file
 * Modular voting mechanisms, delegatable votes, taxonomy/category influenced controls and weighted voting
 * See http://decisions.gnuvernment.org for more information on the project.
 *
 * Heavily inspired by other Drupal modules, mostly from poll.module, but we adapted it to "drupal forms api".
 * Thanks to everyone for all the that was already written. (...and debugged!)
 */

/**
 * Implementation of hook_access().
 */
function decisions_access($op, $node) {
  global $user;

  if ($op == 'create') {
    return user_access('create decisions');
  }
  if ($op == 'delete') {
    return user_access('delete decisions');
  }
  if ($op == 'update') {
    /* if you can create it you can update it, provided it is your own... */
    if (user_access('create decisions') && ($user->uid == $node->uid)) {
      return TRUE;
    }
  }
}
/**
 * Implementation of hook_block().
 */
function decisions_block($op = 'list', $delta = 0, $edit = array()) {
  switch($op) {
    case 'list' :
      $blocks[0]['info'] = t('A decisions block');
      return $blocks;
    case 'view' :
      $blocks["content"] = decisions_block_contents();
      $blocks["subject"] = "decisions";
      return $blocks;
  }
}

/**
 * Content of the block, as returned by decisions_block('view')
 */
function decisions_block_contents() {
  $block = '';
  if ( user_access('view decisions') ) {
    /* get list of decisions and show them */
    if ( user_access('vote on decisions') ) {
      /* add a link to vote on the decision */
    }
  }
  return $block;
}

/**
 * Implementation of hook_cron().
 *
 */
function decisions_cron() {
  /*
  $result = db_query('SELECT p.nid FROM {poll} p INNER JOIN {node} n ON p.nid = n.nid WHERE (n.created + p.runtime) < '. time() .' AND p.active = 1 AND p.runtime != 0');
  while ($poll = db_fetch_object($result)) {
    db_query("UPDATE {poll} SET active = 0 WHERE nid = %d", $poll->nid);
  }
 */
}

/**
 * Implementation of hook_delete().
 */
function decisions_delete($node) {
  db_query("DELETE FROM {decisions} WHERE nid = %d", $node->nid);
  db_query("DELETE FROM {decisions_choices} WHERE nid = %d", $node->nid);
}

/**
 * Implementation of hook_form().
 */
function decisions_form($node) {

  /* standard node elements */
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => TRUE,
    '#default_value' => $node->title,
  );
  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#required' => FALSE,
    '#default_value' => $node->body,
  );
  /* decision-specific elements */
  /* this code is mostly from poll.module */
  if (!isset($node->options)) {
    $node->options = 5;
  }
  // User ticked 'need more choices'.
  if ($_POST['edit']['OptionGroup']['moreoptions']) {
    if (!$node->options)
        $node->options += 1;
    else
    	$node->options *= 2;
   }

  // Options list
  $form['OptionGroup'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => t('Decision options'),
    '#collapsible' => TRUE,
  );
  for ( $option_number = 1; $option_number <= $node->options; $option_number++ ) {
    $form['OptionGroup']['Option_'.$option_number] = array(
      '#type' => 'textfield',
      '#title' => t('Option %n', array('%n' => $option_number)),
      '#required' => FALSE,
      '#default_value' => $node->option[$option_number],
      '#size' => 50,
      '#maxlength' => 127,
    );
  }

  $form['OptionGroup']['options'] = array(
    '#type' => 'hidden',
    '#value' => $node->options,
  );
  $form['OptionGroup']['moreoptions'] = array(
    '#type' => 'checkbox',
    '#title' => t('Need more options'),
    '#default_value' => FALSE,
    '#description' => t("If the amount of boxes above isn't enough, check this box and click the Preview button below to add some more."),
  );

  return array_merge($form, filter_form($node->format));
}


/**
 * Implementation of hook_help().
 */
function decisions_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Allow people to reproduce and surpass the kinds of decision-making instances that exist in face-to-face meetings.');
    case 'node/add#decisions':
      return t('Submit a new decision to the electoral list.');
  }
}

/**
 * Implementation of hook_load().
 */
function decisions_load($node) {
   $decision = db_fetch_object(db_query("SELECT * FROM {decisions} WHERE nid = %d", $node->nid));
   $result = db_query("SELECT optorder, opttext FROM {decisions_options} WHERE nid = %d ORDER BY optorder", $node->nid);
   while ($option = db_fetch_array($result)) {
   	$decision->option[$option['optorder']] = $option['opttext'];
   }
   $decision->options = count($decision->option);
   return $decision;
}

/**
 * Implementation of hook_menu().
 */
function decisions_menu($may_cache) {
  global $user;

  $items = array();

  if ($may_cache) {
    $items[] = array('path' => 'node/add/decisions', 'title' => t('decision'),
      'access' => user_access('create decisions'));
    // Eventually, we could have a 'my decisions' kind of page...
    /*
    $items[] = array('path' => 'decisions', 'title' => t('decisions'),
      'callback' => 'decision_page',
      'access' => user_access('view decisions'),
      'type' => MENU_SUGGESTED_ITEM);
    $items[] = array('path' => 'decisions/'. $user->uid, 'title' => t('my decisions'),
      'access' => user_access('create decisions'),
      'type' => MENU_DYNAMIC_ITEM);
    */
  }

  return $items;
}

/**
 * Implementation of hook_node_info().
 */
function decisions_node_info() {
  return array('decisions' => array('name' => t('decision'), 'base' => 'decisions'));
}

/**
 * Implementation of hook_perm().
 */
function decisions_perm() {
  return array('create decisions', 'delete decisions', 'view decisions', 'vote on decisions');
}

/**
 * Implementation of hook_settings().
 */
function decisions_settings() {
  $output = '';
  return $output;
}

/**
 * Implementation of hook_update().
 */
function decisions_update($node) {
  # XXX: should update decisions here, when it has some parameters

  db_query('DELETE FROM {decisions_options} WHERE nid = %d', $node->nid);

  foreach ($node->OptionGroup as $key => $option) {
  	$order = str_replace('Option_', '', $key);
	if ($order != $key) { # match
		db_query("INSERT INTO {decisions_options} (nid, opttext, optorder) VALUES (%d, '%s', %d)", $node->nid, $option, intval($order));
	   }
	# ignore entries other than options
  }
}

function decisions_insert($node) {
  # just create an empty entry for now
  db_query("INSERT INTO {decisions} (nid) VALUES (%d)", $node->nid);
  # XXX: shouldn't becessary
  db_query('DELETE FROM {decisions_options} WHERE nid = %d', $node->nid);

  foreach ($node->choice as $choice) {
    if ($choice['opttext'] != '') {
      db_query("INSERT INTO {decisions_options} (nid, opttext, optorder) VALUES (%d, '%s', %d)", $node->nid, $choice['opttext'], $i++);
    }
  }
}

/**
 * Implementation of hook_validate().
 */
function decisions_validate($node) {
  #if ($node->OptionGroup['moreoptions'] == '1') {
  #  $node->options++;
  #}
/*
  echo '<html><body><pre>';
  var_export($node);
  echo '</pre></body></html>';
  die();
  // faut appeler form_set_error si necessaire
*/
}

?>
