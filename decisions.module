<?php

/**
 * @file
 *
 * Modular voting mechanisms, delegatable votes, taxonomy/category
 * influenced controls and weighted voting
 *
 * See http://decisions.gnuvernment.org for more information on the project.
 *
 * Heavily inspired by other Drupal modules, mostly from poll.module,
 * but we adapted it to "drupal forms api".  Thanks to everyone for
 * all the that was already written. (...and debugged!)
 */

// $Id$

define('DECISIONS_DEFAULT_ELECTORAL_LIST', 0);
// always, aftervote, or afterclose
define('DECISIONS_DEFAULT_VIEW_RESULTS', 'aftervote');
define('DECISIONS_RUNTIME_INFINITY', 0);


/**
 * hook_init() implementation
 *
 * Most of the stuff here is in subfiles now.
 *
 * Decision modes are in seperate modules in modes/*.module
 */
function decisions_init() {
  // extension files are included here in order to lighten Drupal bootstrap
  module_load_include('inc', 'decisions', 'decisions');
  module_load_include('inc', 'decisions', 'decisions_node');
  module_load_include('inc', 'decisions', 'decisions_datetime');
  drupal_add_css(drupal_get_path('module', 'poll') .'/poll.css');
}

/**
 * Implementation of hook_access().
 */
function decisions_access($op, $node, $account) {
  if ($op == 'create') {
    return user_access('create decisions', $account);
  }
  if ($op == 'delete') {
    return user_access('delete decisions', $account);
  }
  if ($op == 'update') {
    /* you can update it if you can create it, provided it is your own... */
    if (user_access('create decisions', $account) && ($account->uid == $node->uid)) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_block().
 */
function decisions_block($op = 'list', $delta = 'mostrecent', $edit = array()) {
  if ($op == 'list') {
    $block = array('mostrecent' => array('info' => t('Decisions - Newest')));
  }
  elseif ($op == 'view') {
    if (user_access('view decisions')) {
      switch ($delta) {
      case 'mostrecent':
        $block = array('subject' => t('Decisions - Newest'), 'content' => _decisions_block_mostrecent());
        break;
      default:
        $block = array();
        break;
      }
    }
  }
  return $block;
}

/**
 * Implementation of hook_cron().
 *
 * Closes decisions that have exceeded their allowed runtime.
 */
function decisions_cron() {
  $result = db_query('SELECT d.nid FROM {decisions} d INNER JOIN {node} n ON d.nid = n.nid WHERE (n.created + d.runtime) < '. time() .' AND d.active = 1 AND d.runtime <> 0');
  while ($decision = db_fetch_object($result)) {
    db_query("UPDATE {decisions} SET active = 0 WHERE nid=%d", $decision->nid);
  }
}

/**
 * Implementation of votingapi_hook_calculate()
 */
function decisions_votingapi_calculate(&$cache, $votes, $content_type, $content_id) {
  if ($content_type == 'decisions') {
    $node = node_load($content_id);
    $mode = _decisions_get_mode($node);
    $function = "{$mode}_decisions_votingapi_calculate";
    if (function_exists($function)) {
      return call_user_func($function, $node, $cache, $votes, $content_type, $content_id);
    }
  }
}

/**
 * Implementation of hook_help().
 */
function decisions_help($path, $arg) {
  switch ($path) {
  case 'admin/modules#description':
    return t('Allow people to reproduce and surpass the kinds of decision-making instances that exist in face-to-face meetings.');
  }
}

/**
 * Implementation of hook_menu().
 *
 * Just a path for creating new decisions for now, but we could
 * eventually have a 'my decisions' and 'view decisions' kind of
 * page. (TODO)
 */
function decisions_menu() {
  $items['admin/settings/decisions'] = array(
    'title' => 'Configure decisions',
    'description' => 'Configure Decisions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('decisions_admin'),
    'access arguments' => array('administer decisions'),
    'type' => MENU_NORMAL_ITEM,
   );

  $items['node/%node/votes'] = array(
    'title' => 'Votes',
    'page callback' => 'decisions_votes_tab',
    'page arguments' => array(1),
    'access callback' => '_decisions_votes_access',
    'access arguments' => array(1, 'inspect all votes'),
    'weight' => 4,
    'type' => MENU_LOCAL_TASK
  );
  $items['node/%node/results'] = array(
    'title' => 'Results',
    'page callback' => 'decisions_results',
    'page arguments' => array(1),
    'access callback' => '_decisions_can_view_results',
    'access arguments' => array(1),
    'weight' => 1, 	 
    'type' => MENU_LOCAL_TASK);
  $items['node/%node/electoral_list'] = array(
    'title' => 'Electoral list',
    'page callback' => 'decisions_electoral_list_tab',
    'page arguments' => array(1),
    'access callback' => '_decisions_electoral_list_access',
    'access arguments' => array(1, 'view electoral list'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK
  );
  // Allow voters to be removed
  $items['node/%node/remove'] = array(
    'page callback' => 'decisions_electoral_list_remove_voter',
    'page arguments' => array(1, 3),
    'access callback' => '_decisions_electoral_list_access',
    'access arguments' => array(1, 'remove voters'),
    'weight' => 3,
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/reset'] = array(
    'title' => 'Reset votes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('decisions_reset_form', 1),
    'access arguments' => array('administer decisions'),
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
  );
    
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function decisions_perm() {
  return array('create decisions', 'delete decisions', 'view decisions', 'vote on decisions', 'cancel own vote', 'administer decisions', 'inspect all votes', 'view electoral list', 'remove voters');
}

/**
 * Implementation of the admin_settings hook
 */
function decisions_admin() {

  $enabled = array(0 => t('Disabled'), 1 => t('Enabled'));

  $form['main']['decisions_default_electoral_list'] = array(
                                                            '#type' => 'radios',
                                                            '#title' => t('Use electoral list by default'),
                                                            '#description' => t('Use an electoral list by default for new decisions.'),
                                                            '#default_value' => variable_get('decisions_default_electoral_list', DECISIONS_DEFAULT_ELECTORAL_LIST),
                                                            '#options' => $enabled,
                                                            );

  $view_results = array(
                        'always' => t('Always'),
                        'aftervote' => t('After user has voted'),
                        'afterclose' => t('After voting has closed'),
                        );

  $form['main']['decisions_view_results'] = array(
                                                  '#type' => 'radios',
                                                  '#title' => t('When should results be displayed'),
                                                  '#description' => t('Determines when users may view the results of the decision.'),
                                                  '#default_value' => variable_get('decisions_view_results', DECISIONS_DEFAULT_VIEW_RESULTS),
                                                  '#options' => $view_results,
                                                  );

  return system_settings_form($form);
}

function decisions_cancel_form($form_state, $nid) {
  $form['node'] = array('#type' => 'hidden', '#value' => $nid);
  $form['submit'] = array('#type' => 'submit', '#value' => t('Cancel your vote'));
  return $form; 
}

function decisions_cancel_form_submit($form, &$form_state) {
  decisions_cancel($form_state['values']['node']);
}

/*******************/
/* Theme functions */
/*******************/

function decisions_theme() {
  return array(
    'decisions_view_header' => array('arguments' => array('node' => NULL, 'teaser' => FALSE)),
    'decisions_view_voting' => array('arguments' => array('form' => NULL)),
    'decisions_bar' => array('arguments' => array('title' => NULL, 'percentage' => NULL, 'votes' => NULL)),
    'decisions_status' => array('arguments' => array('message' => NULL))
    );
}

/**
 * Theme stub for rendering ecisions header (contains dates and quorum informations).
 */
function theme_decisions_view_header($node, $teaser = FALSE) {

  $output = '<div class="decisions-header">';

  // dates
  $output .= '<div class="decisions-dates">';
  $output .= theme_item_list(
              array(
                 t('Current date: @date', array('@date' => format_date(time()))),
                 t('Opening date: @date', array('@date' => format_date($node->startdate))),
                 ($node->runtime == DECISIONS_RUNTIME_INFINITY ? 
                   t('No closing date.') :
                   t('Closing date: @date', array('@date' => format_date($node->startdate + $node->runtime))))));
  $output .= '</div>';

  // votes
  $num_eligible_voters = _decisions_count_eligible($node);
  $num_voters = _decisions_count_voters($node);
  $output .= '<div class="decisions-votes">';
  $output .= t('@num-voters out of @num-voters-eligible eligible @voters cast their ballot',
               array(
                 '@num-voters' => $num_voters,
                 '@num-voters-eligible' => $num_eligible_voters,
                 '@voters' => format_plural($num_eligible_voters, 'voter', 'voters')
               )
              );
  $output .= '</div>';

  // quorum
  $quorum = _decisions_get_quorum($node);
  if ($quorum > 0) {
    $output .= '<div class="decisions-quorum">';
    $output .= t('Quorum: @d', array('@d' => $quorum));
    $output .= '</div>';
  }
    
  $output .= '</div>';
  return $output;
}

/**
 * Theme stub for redering the voting form, to allow the chance for
 * themes to make this nicer/different
 */
function theme_decisions_view_voting($form) {
  
  $render = 'drupal_render';
  if (!function_exists($render)) {
    $render = 'form_render';
  }
  $output .= '<div class="decisions">';
  $output .= '  <div class="choice-form">';
  $output .= '    <div class="choices">';
  $output .= $render($form['choice']);
  $output .= '    </div>';
  $output .= $render($form['nid']);
  $output .= $render($form['vote']);
  $output .= '  </div>';
  $output .= $render($form);
  $output .= '</div>';
  return $output;
}

/**
 * Theme stub for a decisions bar.
 */
function theme_decisions_bar($title, $percentage, $votes) {
  $output = '<div class="text">'. $title .'</div>';
  $output .= '<div class="bar"><div style="width: '. $percentage .'%;" class="foreground"></div></div>';
  $output .= '<div class="percent">'. $percentage .'% ('. $votes .')</div>';
  return $output;
}
 
/**
 * Outputs a status line.
 */
function theme_decisions_status($message) {
  return '<div class="error">'. $message .'</div>';
}


/****************************/
/* Electoral list functions */
/****************************/

/**
 * Creates the form for the electoral list.
 */
function decisions_electoral_list_form($form_state, $nid) {
  $form = array();
  $form['electoral_list'] = array(
                                  '#type' => 'fieldset',
                                  '#tree' => TRUE,
                                  '#title' => t('Administer electoral list'),
                                  '#collapsible' => TRUE,
                                  '#weight' => 2,
                                  '#collapsed' => TRUE,
                                  );

  $form['electoral_list']['add_user'] = array(
                                              '#type' => 'textfield',
                                              '#title' => t('Add user'),
                                              '#size' => 40,
                                              '#autocomplete_path' => 'user/autocomplete',
                                              '#description' => t('Add an individual user to the electoral list'),
                                              );

  $form['electoral_list']['submit'] = array(
                                            '#type' => 'submit',
                                            '#value' => t('Modify electoral list'),
                                            );

  $form['electoral_list']['reset'] = array(
                                           '#type' => 'button',
                                           '#value' => t('Reset electoral list'),
                                           );

  $form['nid'] = array('#type' => 'hidden', '#value' => $nid);
  return $form;        

}

/**
 * Outputs the electoral list tab.
 */
function decisions_electoral_list_tab() {
  if ($node = menu_get_object()) {
    $output = "";
    if (!$node->uselist) {
      drupal_not_found();
      return;
    }
    drupal_set_title(check_plain($node->title));
    if (user_access('administer decisions')) {
      $form['electoral_list'] = array(
                                      '#type' => 'fieldset',
                                      '#tree' => TRUE,
                                      '#title' => t('Administer electoral list'),
                                      '#collapsible' => TRUE,
                                      '#weight' => 2,
                                      '#collapsed' => TRUE,
                                      );
  	 
      $form['electoral_list']['add_user'] = array(
                                                  '#type' => 'textfield',
                                                  '#title' => t('Add user'),
                                                  '#size' => 40,
                                                  '#autocomplete_path' => 'user/autocomplete',
                                                  '#description' => t('Add an individual user to the electoral list'),
                                                  );
  	 
      $form['electoral_list']['submit'] = array(
                                                '#type' => 'submit',
                                                '#value' => t('Modify electoral list'),
                                                );
  	 
      $form['electoral_list']['reset'] = array(
                                               '#type' => 'button',
                                               '#value' => t('Reset electoral list'),
                                               );
  	 
      $form['nid'] = array('#type' => 'hidden', '#value' => $node->nid);
      $output .= drupal_get_form('decisions_electoral_list_form', $node->nid);
    }
    $output .= t('This table lists all the eligible voters for this Decision.');

    $header[] = array('data' => t('Voter'), 'field' => 'u.name');

    $result = pager_query("SELECT u.uid, u.name FROM {decisions_electoral_list} el LEFT JOIN {users} u ON el.uid = u.uid WHERE el.nid = %d" . tablesort_sql($header), 20, 0, NULL, $node->nid);
    $eligible_voters = array();
    while ($voter = db_fetch_object($result)) {
      $temp = array(theme('username', $voter));
      
      if (user_access('administer decisions')) {
        $temp[] = l(t('remove'), 'node/'. $node->nid .'/remove/'. $voter->uid);
      }
      
      $eligible_voters[] = $temp;
    }
    $output .= theme('table', $header, $eligible_voters);
    $output .= theme('pager', NULL, 20, 0);
    print theme('page', $output);
  }
  else {
    drupal_not_found();
  }
}

/**
 * Remove an individual voter from the electoral list
 */
function decisions_electoral_list_remove_voter($node, $uid) {
  # XXX: useless SELECT call
  $result = db_query('SELECT name FROM {users} WHERE uid=%d', $uid);
  if ($user = db_fetch_object($result)) {
    db_query('DELETE FROM {decisions_electoral_list} WHERE nid=%d AND uid=%d', $node->nid, $uid);
    drupal_set_message(t('%user removed from the electoral list.', array('%user' => $user->name)));
  }
  else {
    drupal_set_message(t('No user found with a uid of %uid.', array('%uid' => $uid)));
  }
  
  drupal_goto('node/'. $node->nid .'/electoral_list');
}
  	 
/**
 * Validate changes to the electoral list
 */
function decisions_electoral_list_form_validate($form, &$form_state) {
  if ($form_state['values']['op'] == t('Reset electoral list')) {
    if (user_access('administer decisions')) {
      db_query('DELETE FROM {decisions_electoral_list} WHERE nid=%d', $form_state['values']['nid']);
      drupal_set_message(t('Electoral list cleared.'));
      $node = menu_get_object();
      if (_decisions_electoral_list_reset($node)) {
        drupal_set_message(t('Electoral list reset.'));
      }
      return;
    }
  }
  $add_user = $form_state['values']['electoral_list']['add_user'];
  if ($add_user) {
    // Check that the user exists
    if (db_fetch_object(db_query('SELECT uid FROM {users} WHERE name="%s"', $add_user))) {
      form_set_error('electoral_list][add_user', t('User %user does not exist.', array('%user' => $add_user)));
      return FALSE;
    }
  }
}
  	 
/**
 * Submit changes to the electoral list
 */
function decisions_electoral_list_form_submit($form, &$form_state) {
  $add_user = $form_state['values']['electoral_list']['add_user'];
  $nid = $form_state['values']['nid'];
  if ($add_user) {
    db_query('REPLACE INTO {decisions_electoral_list} (nid, uid) SELECT "%d", u.uid FROM users u WHERE u.name = "%s"', $nid, $add_user);
    drupal_set_message(t('%user added to electoral list.', array('%user' => $add_user)));
    drupal_goto('node/'. $nid .'/electoral_list');
  }
  else {
    drupal_not_found();
  }
}


/***********************************/
/* Decision-mode related functions */
/***********************************/

/**
 * Show results of the vote.
 *
 * This calls the appropriate vote results function, depending on the
 * mode. It will call the decisions_view_results_$mode hook.
 */
function decisions_view_results(&$node, $teaser, $page) {
  $mode = _decisions_get_mode($node);
  $function = "{$mode}_decisions_view_results";
  if (function_exists($function)) {
    return call_user_func($function, $node, $teaser, $page);
  }
  else {
    _decisions_panic_on_mode($mode, __FUNCTION__);
  }
}

/**
 * View the voting form.
 *
 * This calls a function decisions_vote_$mode, where $mode is defined
 * in the node. If the function does not exist, a watchdog error is
 * raised and the error is reported using drupal_set_message().
 *
 * This also takes care of registering new votes, if the vote button
 * has been pressed.
 */
function decisions_voting_form($form, &$node, $teaser = FALSE, $page = FALSE) {
  $mode = _decisions_get_mode($node);
  if (function_exists("{$mode}_decisions_voting_form")) {
    return call_user_func("{$mode}_decisions_voting_form", $node, $teaser, $page);
  }
  else {
    _decisions_panic_on_mode($mode, __FUNCTION__);
  }
}

function decisions_voting_form_submit($form, &$form_state) {
  $node = node_load($form_state['values']['nid']);
  decisions_vote($node, $form_state['values']);
  drupal_set_message(t('Your vote was registered.'));
  // Transferring makes the results tab display correctly
  drupal_goto('node/'. $node->nid);
}

/**
 * Validate vote form submission
 *
 * This will call a hook named decisions_vote_validate_$mode and
 * return its value. hooks should check $POST to see if the vote data
 * submitted is valid and use form_set_error() if the form has invalid
 * data.
 *
 * @returns boolean true if form has valid data or if no hook is
 * defined in mode
 */
function decisions_voting_form_validate($form, &$form_state) {
  $node = node_load($form_state['values']['nid']);
  $mode = _decisions_get_mode($node);
  if (function_exists("{$mode}_decisions_vote_validate") ) {
    return call_user_func("{$mode}_decisions_vote_validate", $node, $form_state['values']);
  }
  return TRUE;
}

/**
 * Record a vote on the node.
 *
 * This calls the appropriate vote recording function, depending on
 * the mode. It will call the decisions_vote_$mode hook.
 */
function decisions_vote($node, $form_values) {
  $mode = _decisions_get_mode($node);
  $ok = FALSE; // error by default
  if (_decisions_eligible($node)) {
    if (function_exists("{$mode}_decisions_vote")) {
      call_user_func("{$mode}_decisions_vote", $node, $form_values);
    }
    else {
      _decisions_panic_on_mode($mode, __FUNCTION__);
    }
  }
  else {
    drupal_set_message(t('You are not eligible to vote on this decision.'));
  }
}

/**
 * Helper function to list algorithms for a given mode
 */
function decisions_algorithms($mode) {
  $algs = array();
  if (function_exists("{$mode}_decisions_algorithms")) {
    $algs = call_user_func("{$mode}_decisions_algorithms");
    $error = FALSE;
    if (!is_array($algs)) {
      $error = t('Element returned by the call to function @function is not an array, returning dummy value.', 
                    array('@function' => "decisions_{$mode}_algorithms"));
    }
    else if (count($algs) == 0) {
      $error = t('Array returned by the call to function @function is empty, returning dummy value.', 
                    array('@function' => "decisions_{$mode}_algorithms"));      
    }
    if ($error) {
      watchdog('decisions', $error, WATCHDOG_WARNING);
      drupal_set_message($error, 'warning');
    }
  }
  else {
    _decisions_panic_on_mode($mode, __FUNCTION__);
  }
  return $algs;
}


/*************/
/* Callbacks */
/*************/

/**
 * Callback for canceling a vote.
 */
function decisions_cancel($nid) {
  if ($node = node_load($nid)) {
    if ($node->voted && $node->active) {
      $criteria = votingapi_current_user_identifier();
      $criteria['content_type'] = 'decisions';
      $criteria['content_id'] = $node->nid;
      votingapi_delete_votes(votingapi_select_votes($criteria));
      drupal_set_message(t('Your vote was canceled.'));
    }
    else {
      drupal_set_message(t("You are not allowed to cancel an invalid choice."), 'error');
    }
    drupal_goto('node/'. $nid);
  }       
  else {
    drupal_not_found();
  }
}

/**
 * Callback to display the votes tab.
 */
function decisions_votes_tab() {
  if ($node = menu_get_object()) {
    if (!$node->showvotes) {
      // Decision is set to not allow viewing of votes
      drupal_not_found();
      return;
    }
    drupal_set_title(check_plain($node->title));
    $output = t('This table lists all the recorded votes for this Decision. If anonymous users are allowed to vote, they will be identified by the IP address of the computer they used when they voted.');

    $header[] = array('data' => t('Visitor'), 'field' => 'u.name');
    $header[] = array('data' => t('Vote'), '');

    $result = pager_query('SELECT v.value, v.uid, v.vote_source, v.tag, u.name FROM {votingapi_vote} v LEFT JOIN {users} u ON v.uid = u.uid WHERE v.content_id = %d'. tablesort_sql($header), 20, 0, NULL, $node->nid);
    $votes = array();
    $names = array();
    while ($vote = db_fetch_object($result)) {
      $key = $vote->uid? $vote->uid : $vote->vote_source;
      $votes[$key][] = $vote;
      $names[$key] = $vote->name ? theme('username', $vote) : check_plain($vote->vote_source);
    }

    $mode = _decisions_get_mode($node);
    $function_format_votes = "{$mode}_decisions_format_votes";
    if (!function_exists($function_format_votes)) {
      _decisions_panic_on_mode($mode, __FUNCTION__);
      drupal_not_found();
    }
    
    $rows = array();
    foreach ($names as $key => $name) {
      $rows[$key]['name'] = $name;
      $rows[$key]['vote'] = call_user_func($function_format_votes, $node, $votes[$key]);
    }

    $output .= theme('table', $header, $rows);
    $output .= theme('pager', NULL, 20, 0);
    print theme('page', $output);
  }
  else {
    drupal_not_found();
  }
}

/**
 * Callback for 'results' tab for decisions you can vote on. 	 
 */ 	 
function decisions_results() { 	 
  if ($node = menu_get_object()) { 	 
    drupal_set_title(check_plain($node->title)); 	 
    return node_show($node, 0); 	 
  } 	 
  else { 	 
    // The url does not provide the appropriate node id 	 
    drupal_not_found(); 	 
  } 	 
}

 /**
 * Callback to display a reset votes confirmation form
 */
function decisions_reset_form($form_state, $node) {
  $form['nid'] = array('#type' => 'hidden', '#value' => $node->nid);
  return confirm_form($form,
                         t('Are you sure you want to reset the votes for !title?',
                           array('!title' => theme('placeholder', $node->title))),
                         'node/'. $node->nid,
                         t('This action cannot be undone.'),
                         t('Reset votes'),
                         t('Cancel') );
}

/**
 * Reset votes once the confirmation is given
 */
function decisions_reset_form_submit($form, &$form_state) {
  $nid = $form_state['values']['nid'];
  // Delete any votes for the poll
  db_query("DELETE FROM {votingapi_vote} WHERE content_id = %d", $nid);
  drupal_set_message('Votes have been reset.');
  drupal_goto('node/'. $nid);
}
