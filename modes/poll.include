<?php

/**
 * Implementation of the decisions_longname() hook
 */
function decisions_poll_longname() {
  return t("Poll");
}

/**
 * Implementation of the view_voting hook for the poll module.
 * 
 * This creates a list of radios to allow the user to vote on a single
 * poll option.
 */
function decisions_view_voting_poll(&$node, $teaser, $page, $block) {
  if ($node->option) {
    $list = array();
    foreach ($node->option as $i => $option) {
      $list[$i] = check_plain($option);
    }
    $form['option'] = array(
      '#type' => 'radios',
      '#title' => $page ? '' : check_plain($node->title),
      '#default_value' => -1,
      '#options' => $list
    );
  }
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid
  );
  $form['vote'] = array(
    '#type' => 'submit',
    '#value' => t('Vote')
  );
  $form['#action'] = url('node/'. $node->nid);
  return drupal_get_form('decisions_view_voting', $form);
}

/**
 * Implementation of the decisions_view_results() hook for the poll module
 *
 * TODO: implement (http://drupal.org/node/48249)
 */
function decisions_view_results_poll($node, $teaser, $page, $block) {
  $content_type = 'decisions';
	$content_id = $node->nid;

	$results = votingapi_get_voting_results($content_type, $content_id);

	$totalVotes = 0;

  // Count the votes for each option
	$votes = array();
	foreach ($results as $result) {
		if (!$votes[$result->function]) {
			$votes[$result->function] = 0;
		}
		// Not sure if this can just be = rather than +=
		$votes[$result->function] += $result->value;

		$totalVotes += $result->value;
	}

	if ($node->option) {
	  // display results for each possible option
		$output .= '<div class="poll">';
		foreach ($node->option as $i => $opt) {
			if (!$votes[$i]) {
				$votes[$i] = 0;
			}
			$percentage = round(100 * $votes[$i] / $totalVotes, 0);
			$output .= '<div class="text">' . $opt . '</div><div class="bar">'
				. '<div style="width: '
				. $percentage . '%" class="foreground"></div></div><div class="percent">'
				. $percentage . '% (' . $votes[$i] . ' '
				. ($votes[$i] == 1? t('vote') : t('votes')) . ')</div>';
		}
		$output .= '</div>';
	}

	$output .= '<br />';

	return $output;
}

/**
 * implementation of the vote() hook
 *
 * registers the vote as a key for this node using votingapi_set_vote()
 */
function decisions_vote_poll($node) {
  $vote->value = $_POST['edit']['option'];
  $vote->value_type = VOTINGAPI_VALUE_TYPE_KEY;
  votingapi_set_vote('decisions', $node->nid, $vote);
}

/**
 * implementation of the vote_validate() hook
 *
 * check if the submitted key exists, just to make sure the form is not bypassed.
 *
 * @returns boolean true if the form is valid
 */
function decisions_vote_validate_poll($node) {
  if (!($ok = array_key_exists($_POST['edit']['option'], $node->option))) {
    form_set_error('option', 'You must select one option');
  }
  return $ok;
}

